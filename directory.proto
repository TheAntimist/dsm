syntax = "proto3";

package directory;

service DirectoryService {
  rpc hello(Empty) returns(Empty) {}
  rpc register_segment(RegisterRequest) returns(Empty) {}
  rpc register_malloc(RegisterRequest) returns(MallocReply) {}
  rpc request_access(AccessRequest) returns(AccessReply) {}

  rpc init_lock(LkRequest) returns(Empty) {}
  rpc request_lock(LkRequest) returns(Empty) {}
  rpc request_unlock(LkRequest) returns(Empty) {}

  rpc mr_setup(MRRequest) returns(Empty) {}
  rpc mr_barrier(Empty) returns(Empty) {}
}

message LkRequest {
  int32 lockno = 1;
}

message Empty {}

message MRRequest {
  int32 total = 1;
}

message AccessRequest {
  bool is_write = 1;
  int32 page_num = 2;
  string name = 3;
  int32 node_num = 4;
}

message RegisterRequest {
  string name = 1;
  int32 num_pages = 2;
  int32 node_num = 3;
}

message AccessReply {
  int32 page_num = 2;
  bytes page_data = 3;
}

message MallocReply {
  bool is_first = 1;
}

service NodeService {
  rpc hello(Empty) returns(Empty) {}
  rpc invalidate_page(PageRequest) returns(Empty) {}
  rpc grant_request_access(PageRequestAccess) returns(Empty) {}
  rpc fetch_page(PageRequest) returns(PageData) {}
  rpc revoke_write_access(PageRequest) returns(PageData) {}

  rpc request_lock(LockRequest) returns (LockReply) {}
  rpc reply_lock(LockRequest) returns (Empty) {}
}

message PageRequestAccess {
  int32 page_num = 1;
  bool is_write = 2;
  bytes page_data = 3;
  string name = 4;
}

message PageData {
  int32 page_num = 1;
  bytes page_data = 2;
}

message PageRequest {
  int32 page_num = 1;
  string name = 2;
}

message LockRequest {
    int32 lockNo = 1;
    int32 seqNo = 2;
    int32 nodeId = 3;
}

message LockReply {
    int32 lockNo = 1;
    int32 seqNo = 2;
    int32 nodeId = 3;
}
